# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user root;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    server_tokens off;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   60;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    include /etc/nginx/conf.d/*.conf;

#    server {
#	listen 80;
#	server_name palette.hkpalette.com;
#	root /usr/share/nginx/PALETTE3_FRONT/dist;
#
#	location / {
#	    return 301 https://palette.hkpalette.com$request_uri;
#	}
#   }

#    server {
#	listen 80;
#	server_name admin.hkpalette.com;
#	root /usr/share/nginx/PALETTE3_ADMIN/dist;
#
#	location / {
#	    return 301 https://admin.hkpalette.com$request_uri;
#	}
#    }

#   server {
#	listen 80;
#	server_name p3-ttalk-biz.hkpalette.com;
#	root /home/TTALK/hkcloud/rnd/repository/git/TTALK_BIZ/backend/public;
#	location / {
#	    return 301 https://p3-ttalk-biz.hkpalette.com$request_uri;
#	}
#    }

#    server {
#	listen 80;
#	server_name p3-ttalk-chat.hkpalette.com;
#	root /home/TTALK/hkcloud/rnd/repository/git/TTALK_CHAT/backend/public;
#
#	location / {
#	    return 301 https://p3-ttalk-chat.hkpalette.com$request_uri;
#	}
#    }

    server {
        listen 443 ssl; 
        # listen [::]:443 ssl;
        server_name palette.hkpalette.com;
        # index index.html;

        # ssl_certificate /etc/nginx/conf.d/pki/hkpalette.crt;
        # ssl_certificate_key /etc/nginx/conf.d/pki/hkpalette.key;
        ssl_certificate /etc/nginx/conf.d/pki/cert.pem;
        ssl_certificate_key /etc/nginx/conf.d/pki/private.pem;
	ssl_password_file /etc/nginx/conf.d/pki/ssl.pass;

        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;
	ssl_protocols TLSv1.2 TLSv1.3;
	# ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_ciphers HIGH:MEDIUM:!SSLv2:!PSK:!SRP:!ADH:!AECDH;
	ssl_prefer_server_ciphers   on;

	# HSTS (ngx_http_headers_module is required) (63072000 seconds)
	add_header Strict-Transport-Security "max-age=63072000" always;

        location / {       
                # proxy_pass http://172.16.0.12:3004/api;     
                root   /usr/share/nginx/PALETTE3_FRONT/dist;
                try_files $uri	$uri/	/index.html;

		proxy_set_header Origin "https://palette.hkpalette.com";
        }

        location /api {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.12:3004;
                proxy_pass http://express-api;
        }  
	
	location /auth-api {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.12:3004;
                proxy_pass http://express-api;
        }  
	
	location /chat-api {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.12:3004;
                proxy_pass http://express-api;
        }  
	
	location /phone-api {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.12:3004;
                proxy_pass http://express-api;
        }  
	
	location /admin-api {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.12:3004;
                proxy_pass http://express-api;
        }  
	
	#chatgpt-api (fastapi) backend 설정
	location /chatgpt-api {
                proxy_pass http://express-chatgpt-api;
				
				# streaming 데이터 받기 위해 buffering off 설정 추가
				proxy_request_buffering off;
                proxy_buffering off;
        }


        location /message {
                proxy_pass http://172.16.0.100:3004;
        }
        location /reference {
                proxy_pass http://172.16.0.100:3004;
        }
        location /expired_session {
                proxy_pass http://172.16.0.100:3004;
        }        
        location /message_bot {
                proxy_pass http://172.16.0.100:3004;
        }      

	location /stt {
                proxy_pass http://172.16.0.100:3004;
                proxy_redirect off;

                # rewrite된 요청을 websocket 통신으로 변경하기 위한 추가 헤더입니다.
                # 아래 항목들이 추가되어야만 websocket 사용이 가능합니다.
                proxy_http_version      1.1;

                proxy_set_header       Upgrade $http_upgrade;
                proxy_set_header       Connection "upgrade";
                proxy_set_header Host $host;
        }

        location /secured/ws-stomp {
                proxy_pass http://172.16.0.100:3004;
                # proxy_pass https://192.168.103.38;
                # proxy_pass https://aws.hcteletalk.com;

                proxy_redirect off;

                # rewrite된 요청을 websocket 통신으로 변경하기 위한 추가 헤더입니다.
                # 아래 항목들이 추가되어야만 websocket 사용이 가능합니다.
                proxy_http_version      1.1;

                # 초기에 client 요청 url이 wss://test/api/socket 과 같이 websocket protocol 일 경우
                # hop by hop header인 Upgrade 와Connection header 가 hop by hop header의 특성인 다음 커넥션에 전달되지않은 특성으로 인하여
                # 명시적으로 다시 선언해줘야합니다.
                # 그렇기에 $http_upgrade 를 통하여 client 요청 header에서 Upgrade: websocket 정보를 읽어와
                # Upgrade header를 넣어주고
                # Connection header에 이 패킷이 Upgrade될 패킷임을 웹서버가 알 수 있도록 Connection "upgrade" 를 넣어줍니다.
                proxy_set_header       Upgrade $http_upgrade;
                proxy_set_header       Connection "upgrade";
                proxy_set_header Host $host;

		#add_header	Origin "https://dev.hkpalette.com" always;
		#add_header	ok "okok" always;
        }
        location /upload/images {
                rewrite /upload/images/(.*) /$1  break;
                root /PALETTE3/hkcloud/project/deploy/production/repository/web/images/;
        }
        
        location /sotest {
                rewrite /sotest/(.*) /$1  break;
                proxy_pass http://172.16.0.100:3003;
        }

        location /ttalk-images {
                rewrite /ttalk-images/(.*) /$1  break;
                root /TTALK/hkcloud/project/deploy/production/repository/chat/images/;
        }

        # location /test {
        #         rewrite /test/(.*) /$1  break;
        #         root   /usr/share/nginx/test;
        #         try_files $uri	$uri/	/index.html;
        # }
    }

    server {
        listen 443 ssl; 
        # listen [::]:443 ssl;
        server_name admin.hkpalette.com;
        # index index.html;

        # ssl_certificate /etc/nginx/conf.d/pki/hkpalette.crt;
        # ssl_certificate_key /etc/nginx/conf.d/pki/hkpalette.key;
        ssl_certificate /etc/nginx/conf.d/pki/cert.pem;
        ssl_certificate_key /etc/nginx/conf.d/pki/private.pem;
	ssl_password_file /etc/nginx/conf.d/pki/ssl.pass;

        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;
	ssl_protocols TLSv1.2 TLSv1.3;
	# ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_ciphers HIGH:MEDIUM:!SSLv2:!PSK:!SRP:!ADH:!AECDH;
	ssl_prefer_server_ciphers   on;

	# HSTS (ngx_http_headers_module is required) (63072000 seconds)
	add_header Strict-Transport-Security "max-age=63072000" always;

        location / {       
                # proxy_pass http://172.16.0.12:3004/api;     
                root   /usr/share/nginx/PALETTE3_ADMIN/dist;
                try_files $uri	$uri/	/index.html;

		proxy_set_header Origin "https://palette.hkpalette.com";
        }

        location /api {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.12:3004;
                proxy_pass http://express-api;
        }  
	
	location /auth-api {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.12:3004;
                proxy_pass http://express-api;
        }  
	
	location /chat-api {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.12:3004;
                proxy_pass http://express-api;
        }  
	
	location /phone-api {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.12:3004;
                proxy_pass http://express-api;
        }  
	
	location /admin-api {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.12:3004;
                proxy_pass http://express-api;
        }  

        location /message {
                proxy_pass http://172.16.0.100:3004;
        }
        location /reference {
                proxy_pass http://172.16.0.100:3004;
        }
        location /expired_session {
                proxy_pass http://172.16.0.100:3004;
        }        
        location /message_bot {
                proxy_pass http://172.16.0.100:3004;
        }      

	location /stt {
                proxy_pass http://172.16.0.100:3004;
                proxy_redirect off;

                # rewrite된 요청을 websocket 통신으로 변경하기 위한 추가 헤더입니다.
                # 아래 항목들이 추가되어야만 websocket 사용이 가능합니다.
                proxy_http_version      1.1;

                proxy_set_header       Upgrade $http_upgrade;
                proxy_set_header       Connection "upgrade";
                proxy_set_header Host $host;
        }


        location /secured/ws-stomp {
                proxy_pass http://172.16.0.100:3004;
                # proxy_pass https://192.168.103.38;
                # proxy_pass https://aws.hcteletalk.com;

                proxy_redirect off;

                # rewrite된 요청을 websocket 통신으로 변경하기 위한 추가 헤더입니다.
                # 아래 항목들이 추가되어야만 websocket 사용이 가능합니다.
                proxy_http_version      1.1;

                # 초기에 client 요청 url이 wss://test/api/socket 과 같이 websocket protocol 일 경우
                # hop by hop header인 Upgrade 와Connection header 가 hop by hop header의 특성인 다음 커넥션에 전달되지않은 특성으로 인하여
                # 명시적으로 다시 선언해줘야합니다.
                # 그렇기에 $http_upgrade 를 통하여 client 요청 header에서 Upgrade: websocket 정보를 읽어와
                # Upgrade header를 넣어주고
                # Connection header에 이 패킷이 Upgrade될 패킷임을 웹서버가 알 수 있도록 Connection "upgrade" 를 넣어줍니다.
                proxy_set_header       Upgrade $http_upgrade;
                proxy_set_header       Connection "upgrade";
                proxy_set_header Host $host;

		#add_header	Origin "https://dev.hkpalette.com" always;
		#add_header	ok "okok" always;
        }

        location /upload/images {
                rewrite /upload/images/(.*) /$1  break;
                root /PALETTE3/hkcloud/project/deploy/production/repository/web/images/;
        }
        
        location /sotest {
                rewrite /sotest/(.*) /$1  break;
                proxy_pass http://172.16.0.100:3003;
        }
        
        location /ttalk-images {
                rewrite /ttalk-images/(.*) /$1  break;
                root /TTALK/hkcloud/project/deploy/production/repository/chat/images/;
        }

        # location /test {
        #         rewrite /test/(.*) /$1  break;
        #         root   /usr/share/nginx/test;
        #         try_files $uri	$uri/	/index.html;
        # }
    }
    
    server {
        listen 443 ssl; 
        # listen [::]:443 ssl;
        server_name p3-ttalk-biz.hkpalette.com;
        # index index.html;

        # ssl_certificate /etc/nginx/conf.d/pki/hkpalette.crt;
        # ssl_certificate_key /etc/nginx/conf.d/pki/hkpalette.key;
        ssl_certificate /etc/nginx/conf.d/pki/cert.pem;
        ssl_certificate_key /etc/nginx/conf.d/pki/private.pem;
	ssl_password_file /etc/nginx/conf.d/pki/ssl.pass;

        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;
	ssl_protocols TLSv1.2 TLSv1.3;
	# ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_ciphers HIGH:MEDIUM:!SSLv2:!PSK:!SRP:!ADH:!AECDH;
	ssl_prefer_server_ciphers   on;

	# HSTS (ngx_http_headers_module is required) (63072000 seconds)
	add_header Strict-Transport-Security "max-age=63072000" always;

        location / {       
                # proxy_pass http://172.16.0.100:3004/api;    
                root   /home/TTALK/hkcloud/rnd/repository/git/TTALK_BIZ/backend/public;
                try_files $uri	$uri/	/index.html;

                error_page 405 = $uri;

                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_http_version 1.1;

		proxy_set_header Origin "https://dev.hkpalette.com";
		proxy_set_header okok "okokok";
        }

        location /apis {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.100:51001;
                proxy_pass http://127.0.0.1:51001;
                #proxy_pass http://express-biz;
                
                proxy_read_timeout 300;
                proxy_connect_timeout 300;
                proxy_send_timeout 300;

                proxy_request_buffering off;
                proxy_buffering off;
        }  
        
        location /ttalk-images {
                rewrite /ttalk-images/(.*) /$1  break;
                root /TTALK/hkcloud/project/deploy/production/repository/biz/images/;
        }
    }

    server {
        listen 443 ssl; 
        # listen [::]:443 ssl;
        server_name p3-ttalk-chat.hkpalette.com;
        # index index.html;

        # ssl_certificate /etc/nginx/conf.d/pki/hkpalette.crt;
        # ssl_certificate_key /etc/nginx/conf.d/pki/hkpalette.key;
        ssl_certificate /etc/nginx/conf.d/pki/cert.pem;
        ssl_certificate_key /etc/nginx/conf.d/pki/private.pem;
	ssl_password_file /etc/nginx/conf.d/pki/ssl.pass;

        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;
	ssl_protocols TLSv1.2 TLSv1.3;
	# ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_ciphers HIGH:MEDIUM:!SSLv2:!PSK:!SRP:!ADH:!AECDH;
	ssl_prefer_server_ciphers   on;

	# HSTS (ngx_http_headers_module is required) (63072000 seconds)
	add_header Strict-Transport-Security "max-age=63072000" always;

        location /socket.io {
                proxy_pass http://socket_io_server;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;

                # 추가 옵션 (필요에 따라 사용)
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_read_timeout 86400;
        }

        location / {       
                # proxy_pass http://172.16.0.100:3004/api;     
                root   /home/TTALK/hkcloud/rnd/repository/git/TTALK_CHAT/backend/public;
                try_files $uri	$uri/	/index.html;

                error_page 405 = $uri;

                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_http_version 1.1;

		proxy_set_header Origin "https://dev.hkpalette.com";
		proxy_set_header okok "okokok";
        }

        location /apis {
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;

                #proxy_pass http://172.16.0.100:51000;
                proxy_pass http://127.0.0.1:51000;
                #proxy_pass http://express-chat;
                
                proxy_read_timeout 300;
                proxy_connect_timeout 300;
                proxy_send_timeout 300;
                
                proxy_request_buffering off;
                proxy_buffering off;
        }  
        
        location /ttalk-images {
                rewrite /ttalk-images/(.*) /$1  break;
                root /TTALK/hkcloud/project/deploy/production/repository/chat/images/;
        }
    }

    
	
    # server {
    #     listen  8443 ssl http2;
	#     server_name  dev.hkpalette.com;
	#     root   /usr/share/nginx/palette3-hkcloud-front-end/dist;
    #     index index.html;

    #     ssl on;
    #     ssl_certificate /etc/nginx/conf.d/pki/hkpalette.crt;
    #     ssl_certificate_key /etc/nginx/conf.d/pki/hkpalette.key;

    #     ssl_protocols  TLSv1.2 TLSv1.3;

	#     location / {
    #         try_files $uri	$uri/	/index.html;
    # 	}

    #     location /secured/ws-stomp {
    #             # proxy_pass http://192.168.103.250:3004;
    #             proxy_pass https://dev.hkpalette.com:8888/secured/ws-stomp;

    #             add_header Access-Control-Allow-Origin *;
    #         add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
    #         add_header Access-Control-Allow-Credentials 'true';
    #         add_header Access-Control-Allow-Headers 'Accept, Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

    #             # rewrite된 요청을 websocket 통신으로 변경하기 위한 추가 헤더입니다.
    #             # 아래 항목들이 추가되어야만 websocket 사용이 가능합니다.
    #             proxy_http_version      1.1;

    #             # 초기에 client 요청 url이 wss://test/api/socket 과 같이 websocket protocol 일 경우
    #             # hop by hop header인 Upgrade 와Connection header 가 hop by hop header의 특성인 다음 커넥션에 전달되지않은 특성으로 인하여
    #             # 명시적으로 다시 선언해줘야합니다.
    #             # 그렇기에 $http_upgrade 를 통하여 client 요청 header에서 Upgrade: websocket 정보를 읽어와
    #             # Upgrade header를 넣어주고
    #             # Connection header에 이 패킷이 Upgrade될 패킷임을 웹서버가 알 수 있도록 Connection "upgrade" 를 넣어줍니다.
    #             proxy_set_header       Upgrade $http_upgrade;
    #             proxy_set_header       Connection "upgrade";
    #             proxy_set_header Host $host;
    #     }

	#     error_page 404 /404.html;
    #         location = /40x.html {
    #     }

    #     error_page 500 502 503 504 /50x.html;
    #         location = /50x.html {
    #     }

    # }	

    # server {
    #     # 저는 9000번 이지만 사용하시는 환경에 따라 포트를 맞춰주시면 됩니다.
    #     listen  3003 ssl http2;

    #     # 사설 인증서를 이용한 ssl 적용입니다. http로 통신할 분은 ssl_certificate, ssl_certificate_key 항목이 제외됩니다.
    #     # ssl을 설정할 경우 wss 프로토콜을 사용하셔야합니다.
    #     server_name  dev.hkpalette.com;
    #     ssl on;
    #     ssl_certificate /etc/nginx/conf.d/pki/hkpalette.crt;
    #     ssl_certificate_key /etc/nginx/conf.d/pki/hkpalette.key;

    #     charset utf-8;

    #     location / {    

    #         if ($request_method = 'OPTIONS') {
    #             add_header 'Access-Control-Allow-Origin' '*';
    #             add_header 'Access-Control-Allow-Credentials' 'true';
    #             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    #             add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    #             add_header 'Access-Control-Max-Age' 1728000;
    #             add_header 'Content-Type' 'text/plain charset=UTF-8';
    #             add_header 'Content-Length' 0;
    #             return 204;
    #         }
    #         if ($request_method = 'POST') {
    #             add_header 'Access-Control-Allow-Origin' '*';
    #             add_header 'Access-Control-Allow-Credentials' 'true';
    #             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    #             add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    #         }
    #         if ($request_method = 'GET') {
    #             add_header 'Access-Control-Allow-Origin' '*';
    #             add_header 'Access-Control-Allow-Credentials' 'true';
    #             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    #             add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    #         }

    #         # rewrite ^/(api)/(socket)/(.*)$ /$2/$3 break;
    #         # proxy_pass     http://127.0.0.1:32000/$2/$3;
    #         proxy_pass http://192.168.103.250:3004;

    #         # rewrite된 요청을 websocket 통신으로 변경하기 위한 추가 헤더입니다.
    #         # 아래 항목들이 추가되어야만 websocket 사용이 가능합니다.
    #         proxy_http_version      1.1;

    #         # 초기에 client 요청 url이 wss://test/api/socket 과 같이 websocket protocol 일 경우
    #         # hop by hop header인 Upgrade 와Connection header 가 hop by hop header의 특성인 다음 커넥션에 전달되지않은 특성으로 인하여
    #         # 명시적으로 다시 선언해줘야합니다.
    #         # 그렇기에 $http_upgrade 를 통하여 client 요청 header에서 Upgrade: websocket 정보를 읽어와
    #         # Upgrade header를 넣어주고
    #         # Connection header에 이 패킷이 Upgrade될 패킷임을 웹서버가 알 수 있도록 Connection "upgrade" 를 넣어줍니다.
    #         proxy_set_header       Upgrade $http_upgrade;
    #         proxy_set_header       Connection "upgrade";
    #         proxy_set_header Host $host;
    #     }
    # }

    #API 서버 호출 
    upstream api.hkcloud.com {
        ## Can be connected with "nginx-proxy" network
        # test web server container
        server 121.67.187.119:3004;
    }

    #WEB 서버 호출 
    upstream web.hkcloud.com {
        ## Can be connected with "nginx-proxy" network
        # test web server container
        server 121.67.187.119:8443;
    }
    
    upstream express-api {
       server 127.0.0.1:3004 ;
    }
    upstream express-api2 {
       server 127.0.0.1:3005 ;
    }
    
    upstream express-biz {
       server 127.0.0.1:51001;
    }
    upstream express-chat {
       server 127.0.0.1:51000;
    }

    upstream socket_io_server {
        server 127.0.0.1:51000; # 로컬에 띄운 Socket.IO 서버의 IP 주소와 포트 번호
    }
	
	upstream express-chatgpt-api {
       server 127.0.0.1:52000;
    }
}

