<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="kr.co.hkcloud.palette3.chat.qa.dao.ChatQATargetManageMapper">
				   
<sql id="extract_target">
SELECT
	AAAAA.*
FROM(
	SELECT AAAA.*
		, MAX(USER_RANK) OVER (PARTITION BY USER_ID) as USER_LIMIT
	  FROM (
		SELECT AAA.*
			,ROW_NUMBER() OVER (PARTITION BY USER_ID ORDER BY TALK_CONTACT_ID ASC ) as USER_RANK 
						
		<!-- 
		     , CASE WHEN @UR_USER_ID != AAA.USER_ID
		            THEN @UR_USER_RANK := 1
		            ELSE @UR_USER_RANK := @UR_USER_RANK + 1
		        END
		     , CASE WHEN @UR_USER_ID != AAA.USER_ID
		            THEN @UR_USER_ID := AAA.USER_ID
		        END
		     , @UR_USER_RANK AS USER_RANK
		     , @UR_USER_ID
		      -->
		  FROM (
		        SELECT CC.*
		             , CASE WHEN CC.TALK_END_DT IS NOT NULL
		                     AND CC.TALK_POST_DT IS NOT NULL
		                     AND CC.TALK_START_DT IS NOT NULL
		                    THEN ABS((TO_DATE(COALESCE(DECODE(CC.TALK_POST_DT, '', CC.TALK_END_DT, CC.TALK_POST_DT), CC.TALK_START_DT), 'YYYYMMDDHH24MISS')-(TO_DATE(CC.TALK_START_DT, 'YYYYMMDDHH24MISS'))))*24*60*60 
		                    ELSE NULL
		                END AS TOTAL_CHATTING 
		          FROM (SELECT A.* FROM ( 
		          						
		          						<foreach collection="WORK_ARRAY" item="item" separator="union all">
		          						SELECT TALK_CONTACT_ID 
		          						  FROM PLT_CHT_CUTT CC 
										 WHERE  CUSTCO_ID = 'HKCTALKMNG'
										   AND #{item.WORK_START} <![CDATA[ <= ]]> CC.TALK_DIST_DT AND CC.TALK_DIST_DT <![CDATA[  < ]]> #{item.WORK_END}
										</foreach>
										 
									   ) B JOIN PLT_CHT_CUTT A ON A.TALK_CONTACT_ID = B.TALK_CONTACT_ID	   
						) CC
					JOIN PLT_USER B01
		            ON (    B01.USER_ID = CC.USER_ID
		                AND B01.USE_YN = 'Y'
					<if test="USER_ATTR_A != ''">AND B01.USER_ATTR_A = #{USER_ATTR_A}</if>
					<if test="USER_ATTR_B != ''">AND B01.USER_ATTR_B = #{USER_ATTR_B}</if>
					<if test="USER_ATTR_C != ''">AND B01.USER_ATTR_C = #{USER_ATTR_C}</if>
					<if test="USER_ATTR_D != ''">AND B01.USER_ATTR_D = #{USER_ATTR_D}</if>
		                )	
		            WHERE CC.TALK_STAT_CD IN ('80'
		                                 , '82'
		                                 , '90'
		                                 , '81'
		                                 , '83'
		                                 , '91'
		                                 , '92'
		                                 , '12'
		                                 , '20'
		                                 , '21'
		                                 , '14'
		                                 , '93'
		                                   )
		           AND CC.USER_ID IS NOT NULL
				<if test="QA_SEQ == '2'.toString() and EXCLUDE_PREV_EVAL_YN == 'Y'.toString()">
				   AND NOT EXISTS(SELECT 1
				                    FROM PLT_CHT_QA_EVAL
				                   WHERE CUSTCO_ID = 'HKCTALKMNG'
				                     AND QA_YM = #{QA_YM}
		                             AND QA_TY_CD = #{QA_TY_CD} 
		                             AND QA_SEQ = '1'
		                             AND TALK_CONTACT_ID = CC.TALK_CONTACT_ID
		                             AND USER_ID = CC.USER_ID
		                             AND QA_FIN = 'Y'
				                  )
				</if>
				<if test="CHAT_TIME_FROM != '' or CHAT_TIME_TO != ''">
				            AND (CASE
								 WHEN CC.TALK_END_DT IS NOT NULL AND CC.TALK_POST_DT IS NOT NULL AND CC.TALK_START_DT IS NOT NULL
								 THEN TO_CHAR(TRUNC( (CAST(TO_CHAR(TO_DATE(COALESCE(DECODE(TALK_POST_DT, '', TALK_END_DT, TALK_POST_DT), TALK_START_DT), 'YYYYMMDDHH24MISS') - TO_DATE(TALK_START_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) /3600),'FM9900')  ||  
                                      TO_CHAR(TRUNC(MOD( (CAST(TO_CHAR(TO_DATE(COALESCE(DECODE(TALK_POST_DT, '', TALK_END_DT, TALK_POST_DT), TALK_START_DT), 'YYYYMMDDHH24MISS') - TO_DATE(TALK_START_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) ,3600)/60),'FM00')
								ELSE ''
							END BETWEEN '0000' AND '2359')
				<!-- 
		           AND CASE WHEN CC.TALK_END_DT IS NOT NULL
		                     AND CC.TALK_POST_DT IS NOT NULL
		                     AND CC.TALK_START_DT IS NOT NULL
		                    THEN TIME_FORMAT(TIMEDIFF(STR_TO_DATE(IFNULL(CC.TALK_POST_DT, TALK_END_DT), '%Y%m%d%H%i%s') /*전달을 한 건 경우 채팅종료 값이 존재하지 않기 때문에 다음과 같이 처리*/ 
		                                            , STR_TO_DATE(CC.TALK_START_DT                    , '%Y%m%d%H%i%s')
		                                              )
		                                   , '%H%i'
		                                     )
		                    ELSE ''
		                END BETWEEN IF(#{CHAT_TIME_FROM} != '', #{CHAT_TIME_FROM}, '0000')
		                        AND IF(#{CHAT_TIME_TO}   != '', #{CHAT_TIME_TO}  , '2359')
		               -->          
				</if>
				<if test="TALK_STAT_CD != ''">
				   AND CC.TALK_STAT_CD = #{TALK_STAT_CD}
				</if>
				<if test="SRH_CNSL_TYP_CD !=''"> AND CC.CNSL_TYP_CD = #{SRH_CNSL_TYP_CD}</if>
				<if test="SRH_CNSL_TYP_CD_2 !=''"> AND CC.CNSL_TYP_CD_2 = #{SRH_CNSL_TYP_CD_2}</if>
				<if test="SRH_CNSL_TYP_CD_3 !=''"> AND CC.CNSL_TYP_CD_3 = #{SRH_CNSL_TYP_CD_3}</if>
				<if test="SRH_CNSL_TYP_CD_4 !=''"> AND CC.CNSL_TYP_CD_4 = #{SRH_CNSL_TYP_CD_4}</if>
				<if test="USER_ID != ''">AND CC.USER_ID = #{USER_ID}</if>
		   
		         ORDER BY CC.USER_ID
		                 <!-- , RAND() -->
		        ) AAA
		 WHERE 1 = 1
	 ) AAAA
 ) AAAAA
<![CDATA[
   WHERE AAAAA.USER_RANK <= AAAAA.USER_LIMIT
]]> 
</sql>

<select id="selectWorkTime" parameterType="java.util.HashMap" resultType="java.util.HashMap">
 SELECT AA.YYYYMMDD
    , BB.WORK_TIME_FROM
    , BB.WORK_TIME_TO
    , AA.YYYYMMDD
           || BB.WORK_TIME_FROM
           || '00'
	       AS WORK_START
    , CASE WHEN BB.WORK_TIME_FROM
                     > BB.WORK_TIME_TO
                  THEN TO_CHAR(TO_DATE(AA.YYYYMMDD, 'YYYYMMDD') + 1, 'YYYYMMDD')
                  ELSE AA.YYYYMMDD
              END
           || BB.WORK_TIME_TO
           || '00'
              AS WORK_END
 FROM (
	   SELECT YYYYMMDD 
		 FROM PLT_CAL
        WHERE YYYYMMDD BETWEEN #{SEARCH_FROM}  AND #{SEARCH_TO}
        ) AA
JOIN PLT_CHT_WRK_TIME_HST BB
     ON AA.YYYYMMDD BETWEEN BB.MANAGE_DATE_FROM
                        AND BB.MANAGE_DATE_TO
  WHERE BB.CUSTCO_ID = 'HKCTALKMNG'
    AND BB.USE_YN = 'Y'
                   
</select>

<select id="selectRtnMainList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
<![CDATA[
SELECT 
    CASE WHEN  QM.QA_YM IS NOT NULL AND QM.QA_TY_CD IS NOT NULL AND QM.QA_SEQ IS NOT NULL AND QM.TALK_CONTACT_ID IS NOT NULL AND QM.USER_ID IS NOT NULL
    	  THEN 'Y' ELSE 'N' END AS EXTRACTED_YN
    , QM.QA_YM AS QM_QA_YM
    , QM.QA_TY_CD AS QM_QA_TY_CD
    , QM.QA_SEQ AS QM_QA_SEQ
    , QM.TALK_CONTACT_ID AS QM_TALK_CONTACT_ID
    , QM.USER_ID AS QM_USER_ID
    , ET.TALK_USER_KEY
    , ET.TALK_CONTACT_ID
    , ET.USER_ID
    , T4.DSPTCH_PRF_NM AS SNDR_KEY_NM
	, T3.CD_NM 															AS TALK_STAT_NM
    , ET.USER_NICK || '(' || ET.USER_ID || '/' || ET.USER_NM || ')' 	AS TRANS_USER_ID_NM /*최종상담사*/
    , CASE WHEN ET.ORI_TALK_CONTACT_ID IS NOT NULL
	       THEN (SELECT USER_NICK || '(' || USER_ID || '/' || USER_NM || ')' 
	               FROM PLT_USER 
	              WHERE CUSTCO_ID = 'HKCTALKMNG'
	                AND USER_ID = (SELECT USER_ID 
	                                 FROM PLT_CHT_CUTT 
	                                WHERE CUSTCO_ID = 'HKCTALKMNG'
	                                  AND TALK_CONTACT_ID = ET.ORI_TALK_CONTACT_ID
	                               )
	             )
	       ELSE ET.USER_NICK || '(' || ET.USER_ID || '/' || ET.USER_NM || ')'
	   END                                                                                                             AS USER_ID_NM /*최초상담사*/
    , ET.EXEC_RST_CD
    , COALESCE(T2.CUSTOMER_NM, '알수없음')																				   AS CUSTOMER_NM
    , COALESCE(T2.CUSTOMER_ID,ET.TALK_USER_KEY) 																	   AS CUSTOMER_ID
	, ET.CNSL_TYP_CD
    , ET.CNSL_TYP_CD_2
    , ET.CNSL_TYP_CD_3
    , ET.CNSL_TYP_CD_4
    , (SELECT CNSL_TYP_NM 
         FROM PLT_CHT_CUTT_TYP T6
        WHERE T6.CUSTCO_ID = 'HKCTALKMNG'
          AND ET.CNSL_TYP_CD = T6.CNSL_TYP_CD
          AND T6.CNSL_TYP_DIV_CD = '1'
       ) AS CNSL_TYP_NM
    , (SELECT CNSL_TYP_NM 
         FROM PLT_CHT_CUTT_TYP T7
        WHERE T7.CUSTCO_ID = 'HKCTALKMNG'
          AND ET.CNSL_TYP_CD_2 = T7.CNSL_TYP_CD
          AND T7.CNSL_TYP_DIV_CD = '2'
       ) AS CNSL_TYP_NM_2
    , (SELECT CNSL_TYP_NM 
         FROM PLT_CHT_CUTT_TYP T8
        WHERE T8.CUSTCO_ID = 'HKCTALKMNG'
          AND ET.CNSL_TYP_CD_3 = T8.CNSL_TYP_CD
          AND T8.CNSL_TYP_DIV_CD = '3'
       ) AS CNSL_TYP_NM_3
    , (SELECT CNSL_TYP_NM 
         FROM PLT_CHT_CUTT_TYP T9
        WHERE T9.CUSTCO_ID = 'HKCTALKMNG'
          AND ET.CNSL_TYP_CD_4 = T9.CNSL_TYP_CD
          AND T9.CNSL_TYP_DIV_CD = '4'
       ) AS CNSL_TYP_NM_4
	, CASE WHEN T5.INQRY_TYP_DIV_CD = '1' THEN T5.INQRY_TYP_NM 
		   ELSE (SELECT INQRY_TYP_NM FROM PLT_CHT_INQ_TYP WHERE CUSTCO_ID = 'HKCTALKMNG' AND INQRY_TYP_CD = T5.SPST_INQRY_TYP_CD) END 		   AS TALK_INQRY_NM_1
	, CASE WHEN T5.INQRY_TYP_DIV_CD = '1' THEN T5.INQRY_TYP_CD 
		   ELSE (SELECT INQRY_TYP_CD FROM PLT_CHT_INQ_TYP WHERE CUSTCO_ID = 'HKCTALKMNG' AND INQRY_TYP_CD = T5.SPST_INQRY_TYP_CD) END 		   AS TALK_INQRY_CD_1
	, CASE WHEN T5.INQRY_TYP_DIV_CD = '2' THEN T5.INQRY_TYP_NM ELSE '' 									END 		   AS TALK_INQRY_NM_2
	, CASE WHEN T5.INQRY_TYP_DIV_CD = '2' THEN T5.INQRY_TYP_CD ELSE '' 									END 		   AS TALK_INQRY_CD_2
    , ET.BOT_SERVICE_NM
    , ET.TALK_QST
    , ET.TALK_ANS
    , ET.TALK_DIST_DT
	, ET.TALK_START_DT
	, ET.TALK_POST_DT
	, ET.TALK_END_DT
	
	, CASE WHEN ET.TALK_DIST_DT IS NULL OR ET.TALK_START_DT IS NULL OR ET.TALK_STAT_CD NOT IN ('14','20','21')
              THEN NULL
              ELSE        
                TO_CHAR(TRUNC((CAST(TO_CHAR(TO_DATE(ET.TALK_START_DT,'YYYYMMDDHH24MISS') - TO_DATE(ET.TALK_DIST_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) /3600),'FM9900') || ':' ||  
                TO_CHAR(TRUNC(MOD((CAST(TO_CHAR(TO_DATE(ET.TALK_START_DT,'YYYYMMDDHH24MISS') - TO_DATE(ET.TALK_DIST_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) ,3600)/60),'FM00') || ':' ||  
                TO_CHAR(MOD((CAST(TO_CHAR(TO_DATE(ET.TALK_START_DT,'YYYYMMDDHH24MISS') - TO_DATE(ET.TALK_DIST_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) ,60),'FM00')   
              END                                                                                				   			   AS READY_TIME /*고객대기시간(상담중-대기중)*/
            
    , CASE WHEN ET.TALK_POST_DT IS NULL OR ET.TALK_START_DT IS NULL OR ET.TALK_STAT_CD NOT IN ('14','20','21')
           THEN NULL
           ELSE 
             TO_CHAR(TRUNC((CAST(TO_CHAR(TO_DATE(COALESCE(DECODE(TALK_POST_DT, '', TALK_END_DT, TALK_POST_DT), TALK_START_DT),'YYYYMMDDHH24MISS') - TO_DATE(ET.TALK_START_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) /3600),'FM9900') || ':' ||  
             TO_CHAR(TRUNC(MOD((CAST(TO_CHAR(TO_DATE(COALESCE(DECODE(TALK_POST_DT, '', TALK_END_DT, TALK_POST_DT), TALK_START_DT),'YYYYMMDDHH24MISS') - TO_DATE(ET.TALK_START_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) ,3600)/60),'FM00') || ':' ||  
             TO_CHAR(MOD((CAST(TO_CHAR(TO_DATE(COALESCE(DECODE(TALK_POST_DT, '', TALK_END_DT, TALK_POST_DT), TALK_START_DT),'YYYYMMDDHH24MISS') - TO_DATE(ET.TALK_START_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) ,60),'FM00')                 
          END                                                                                				   			   AS CHAT_TIME /*상담소요시간(후처리-상담중)*/
              
     , CASE WHEN ET.TALK_END_DT IS NULL OR ET.TALK_POST_DT IS NULL OR ET.TALK_STAT_CD NOT IN ('14','21')
            THEN NULL
            ELSE 
              TO_CHAR(TRUNC((CAST(TO_CHAR(TO_DATE(ET.TALK_END_DT,'YYYYMMDDHH24MISS') - TO_DATE(DECODE(ET.TALK_POST_DT, '', ET.TALK_END_DT, ET.TALK_POST_DT), 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) /3600),'FM9900') || ':' ||  
              TO_CHAR(TRUNC(MOD((CAST(TO_CHAR(TO_DATE(ET.TALK_END_DT,'YYYYMMDDHH24MISS') - TO_DATE(DECODE(ET.TALK_POST_DT, '', ET.TALK_END_DT, ET.TALK_POST_DT), 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) ,3600)/60),'FM00') || ':' ||  
              TO_CHAR(MOD((CAST(TO_CHAR(TO_DATE(ET.TALK_END_DT,'YYYYMMDDHH24MISS') - TO_DATE(DECODE(ET.TALK_POST_DT, '', ET.TALK_END_DT, ET.TALK_POST_DT), 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) ,60),'FM00')                 
            END                                                                                				   			   AS AFTER_TIME /*후처리시간(상담이력저장-후처리)*/
            
	 , CASE WHEN ET.TALK_END_DT IS NULL OR ET.TALK_START_DT IS NULL OR ET.TALK_STAT_CD NOT IN ('14','21')
      		THEN NULL
      		ELSE 
	           TO_CHAR(TRUNC((CAST(TO_CHAR(TO_DATE(ET.TALK_END_DT,'YYYYMMDDHH24MISS') - TO_DATE(ET.TALK_START_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) /3600),'FM9900') || ':' ||  
	           TO_CHAR(TRUNC(MOD((CAST(TO_CHAR(TO_DATE(ET.TALK_END_DT,'YYYYMMDDHH24MISS') - TO_DATE(ET.TALK_START_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) ,3600)/60),'FM00') || ':' ||  
	           TO_CHAR(MOD((CAST(TO_CHAR(TO_DATE(ET.TALK_END_DT,'YYYYMMDDHH24MISS') - TO_DATE(ET.TALK_START_DT, 'YYYYMMDDHH24MISS')) AS INTEGER) * (24*60*60)) ,60),'FM00')                 
       		END                                                                                				   			   AS TOT_TIME /*총소요시간(상담이력저장-상담중)*/
          
	, ET.TALK_TITLE
	, ET.TALK_STAT_CD
	, T2.CUSTOMER_MEMO
	, ET.SNDR_KEY
	, T2.REFERENCE_CUSTOMER_KEY 																					   AS REFERENCE_CUSTOMER_KEY
	, T2.TID				 																						   AS TID
	, T5.INQRY_TYP_DIV_CD
	, ET.BOT_CALL_ID																								   AS CALL_ID
	, CASE WHEN T2.TID IS NULL OR T2.TID IS NULL THEN '비회원' ELSE '회원' END 											   AS CUSTOMER_MEMBER
	, (SELECT CD_NM FROM PLT_COMN_CD CT WHERE CT.GROUP_CD = 'TALK005' AND CT.CD=ET.EXEC_RST_CD AND CT.CD_TYPE  = '1') AS EXEC_RST_NM
]]>
  FROM (
        SELECT AFP.*
             , (SELECT USER_NM FROM PLT_USER B01 WHERE AFP.USER_ID = B01.USER_ID ) AS USER_NM 
             , (SELECT USER_NICK FROM PLT_USER B01 WHERE AFP.USER_ID = B01.USER_ID ) AS USER_NICK
	      FROM (
	        SELECT  AAAAA.*
	          FROM (
        
        <include refid="extract_target" />
        
                ) AAAAA
	         ) AFP
        ) ET
  LEFT 
  JOIN PLT_CHT_QA_EVAL QM
    ON #{QA_YM} = QM.QA_YM
   AND #{QA_TY_CD} = QM.QA_TY_CD
   AND #{QA_SEQ} = QM.QA_SEQ
   AND ET.TALK_CONTACT_ID = QM.TALK_CONTACT_ID
   AND ET.USER_ID = QM.USER_ID
	
	INNER JOIN PLT_COMN_CD T3
	ON ET.TALK_STAT_CD = T3.CD
	AND T3.GROUP_CD = 'TALK001'
	INNER JOIN PLT_ASP_CUS_CHN T4
	ON ET.SNDR_KEY = T4.SNDR_KEY
	LEFT OUTER JOIN PLT_CUS T2
	ON ET.TALK_USER_KEY = T2.TALK_USER_KEY
	LEFT OUTER JOIN PLT_CHT_INQ_TYP T5
	ON ET.TALK_INQRY_CD = T5.INQRY_TYP_CD
	AND T5.CUSTCO_ID = 'HKCTALKMNG'
</select>

<select id="selectRtnPreExtractedCount" parameterType="java.util.HashMap" resultType="java.util.HashMap">
SELECT COUNT(1) AS PRE_EXTRACTED_COUNT
  FROM PLT_CHT_QA_EVAL
 WHERE CUSTCO_ID = 'HKCTALKMNG'
   AND QA_YM = #{QA_YM}
   AND QA_TY_CD = #{QA_TY_CD}
   AND QA_SEQ = #{QA_SEQ}
</select>

<select id="selectExtractTarget" parameterType="java.util.HashMap" resultType="java.util.HashMap">
SELECT ET.TALK_CONTACT_ID
     , ET.USER_ID
  FROM (
        <include refid="extract_target" />
        ) ET
</select>

<insert id="insertRtnExtractTarget" parameterType="java.util.HashMap">


  MERGE INTO PLT_CHT_QA_EVAL T
	USING 
	(
	 SELECT
      NULLIF('HKCTALKMNG','')    AS   CUSTCO_ID    
      , #{QA_YM}                      AS   QA_YM           
      , #{QA_TY_CD}                   AS   QA_TY_CD        
      , #{QA_SEQ}                     AS   QA_SEQ          
      , #{USER_ID}                    AS   USER_ID         
      , #{QA_USER_ID}                 AS   QA_USER_ID      
      , #{TALK_CONTACT_ID}            AS   TALK_CONTACT_ID 
      , #{QA_CN}                      AS   QA_CN           
      , #{QA_EXT_CHK}                 AS   QA_EXT_CHK      
      , #{QA_END}                     AS   QA_END          
      , #{QA_NOTIN}                   AS   QA_NOTIN        
      , #{QA_FIN}                     AS   QA_FIN          
      , #{REGR_ID}                    AS   REGR_ID         
      , NOW()                       AS   REG_DTTM        
      , #{AMDR_ID}                    AS   AMDR_ID         
      , NOW()                       AS   UPD_DTTM  
	 
	) S
	ON 
	(
	T.CUSTCO_ID = S.CUSTCO_ID
		AND T.QA_YM = S.QA_YM
		AND T.QA_TY_CD = S.QA_TY_CD
		AND T.QA_SEQ = S.QA_SEQ
		AND T.TALK_CONTACT_ID = S.TALK_CONTACT_ID
	)
	WHEN MATCHED THEN 
	UPDATE SET
          AMDR_ID = #{AMDR_ID}
        , UPD_DTTM = NOW()   
	WHEN NOT MATCHED THEN
	INSERT 
	(
        T.CUSTCO_ID
	      , T.ID
	      , T.QA_YM
	      , T.QA_TY_CD
	      , T.QA_SEQ
	      , T.USER_ID
	      , T.QA_USER_ID
	      , T.TALK_CONTACT_ID
	      , T.QA_CN
	      , T.QA_EXT_CHK
	      , T.QA_END
	      , T.QA_NOTIN
	      , T.QA_FIN
	      , T.REGR_ID
	      , T.REG_DTTM
	      , T.AMDR_ID
	      , T.UPD_DTTM
	)
	VALUES
	(
        S.CUSTCO_ID
        , #{SEQNo}
	      , S.QA_YM
	      , S.QA_TY_CD
	      , S.QA_SEQ
	      , S.USER_ID
	      , S.QA_USER_ID
	      , S.TALK_CONTACT_ID
	      , S.QA_CN
	      , S.QA_EXT_CHK
	      , S.QA_END
	      , S.QA_NOTIN
	      , S.QA_FIN
	      , S.REGR_ID
	      , S.REG_DTTM
	      , S.AMDR_ID
	      , S.UPD_DTTM      
	)
</insert>

<update id="updateRtnExtractClose" parameterType="java.util.HashMap">
UPDATE PLT_CHT_QA_EVAL
   SET AMDR_ID = #{AMDR_ID}
     , UPD_DTTM = NOW()
     , QA_END = 'Y' 
 WHERE CUSTCO_ID = 'HKCTALKMNG'
   AND QA_YM = #{QA_YM}
   AND QA_TY_CD = #{QA_TY_CD}
   AND QA_SEQ = #{QA_SEQ}
</update>

<delete id="deleteRtnExtractReset" parameterType="java.util.HashMap">
DELETE 
  FROM PLT_CHT_QA_EVAL
 WHERE CUSTCO_ID = 'HKCTALKMNG'
   AND QA_YM = #{QA_YM}
   AND QA_TY_CD = #{QA_TY_CD}
   AND QA_SEQ = #{QA_SEQ}
</delete>

<update id="updateRtnEvaluationClose" parameterType="java.util.HashMap">
UPDATE PLT_CHT_QA_EVAL
   SET AMDR_ID = #{AMDR_ID}
     , UPD_DTTM = NOW()
     , QA_FIN = 'Y' 
 WHERE CUSTCO_ID = 'HKCTALKMNG'
   AND QA_YM = #{QA_YM}
   AND QA_TY_CD = #{QA_TY_CD}
   AND QA_SEQ = #{QA_SEQ}
</update>

<delete id="deleteRtnExtractRemove" parameterType="java.util.HashMap">
DELETE 
  FROM PLT_CHT_QA_EVAL
 WHERE CUSTCO_ID = 'HKCTALKMNG'
   AND QA_YM = #{QA_YM}
   AND QA_TY_CD = #{QA_TY_CD}
   AND QA_SEQ = #{QA_SEQ}
   AND TALK_CONTACT_ID = #{TALK_CONTACT_ID}
   AND USER_ID = #{USER_ID}
</delete>

<select id="selectHaveExtractClose" parameterType="java.util.HashMap" resultType="java.util.HashMap">
SELECT COALESCE( MAX(QA_END),'N') AS HAVE_EXTRACT_CLOSE
  FROM PLT_CHT_QA_EVAL
 WHERE CUSTCO_ID = 'HKCTALKMNG'
   AND QA_YM = #{QA_YM}
   AND QA_TY_CD = #{QA_TY_CD}
   AND QA_SEQ = #{QA_SEQ}
</select>

<select id="selectHaveEvaluatedYN" parameterType="java.util.HashMap" resultType="java.util.HashMap">
SELECT 
	   CASE WHEN MAX(QA_USER_ID) IS NOT NULL AND QA_USER_ID IS NOT NULL THEN 'Y' ELSE 'N' END HAVE_EVALUATED_YN
  FROM PLT_CHT_QA_EVAL
 WHERE CUSTCO_ID = 'HKCTALKMNG'
   AND QA_YM = #{QA_YM}
   AND QA_TY_CD = #{QA_TY_CD}
   AND QA_SEQ = #{QA_SEQ}
GROUP BY QA_USER_ID
</select>

<select id="selectNotEvaluatedCount" parameterType="java.util.HashMap" resultType="java.util.HashMap">
SELECT COUNT(1) AS NOT_EVALUATED_COUNT
  FROM PLT_CHT_QA_EVAL
 WHERE CUSTCO_ID = 'HKCTALKMNG'
   AND QA_YM = #{QA_YM}
   AND QA_TY_CD = #{QA_TY_CD}
   AND QA_SEQ = #{QA_SEQ}
   AND QA_USER_ID IS NULL
   AND QA_NOTIN <![CDATA[<>]]> 'Y'
</select>

</mapper>

